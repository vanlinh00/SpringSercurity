package com.example.SpringSecurity.service;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.concurrent.CompletableFuture;

@Service
public class InvoiceService {

    /*

    ‚úÖ I. L√Ω do c·∫ßn chia l√†m 3 lu·ªìng (threads)

    üß† 1. T·ªëi ∆∞u hi·ªáu su·∫•t - Tr√°nh ch·ªù ƒë·ª£i IO

    T√°c v·ª• in phi·∫øu g·ªìm nhi·ªÅu b∆∞·ªõc ch·∫≠m nh∆∞:

    Ghi file PDF (FileOutputStream, PdfWriter)

    T·∫°o barcode (m·∫•t CPU)

    T·∫°o th∆∞ m·ª•c, ki·ªÉm tra t·ªìn t·∫°i

    N·∫øu x·ª≠ l√Ω tu·∫ßn t·ª±, m·ªói t√°c v·ª• s·∫Ω block to√†n b·ªô h·ªá th·ªëng, khi·∫øn hi·ªáu su·∫•t gi·∫£m nghi√™m tr·ªçng.

‚û°Ô∏è Ch·∫°y b·∫•t ƒë·ªìng b·ªô (@Async) gi√∫p x·ª≠ l√Ω song song nhi·ªÅu ƒë∆°n h√†ng, tƒÉng t·ªëc ƒë·ªô t·ªïng th·ªÉ.
     */
    @Async("printTaskExecutor")  // thread pool printTaskExecutor ƒë·ªÉ ch·∫°y method
    public CompletableFuture<String> printInvoice(String orderId) {
        try {
            // T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
            Files.createDirectories(Paths.get("output"));

            String fileName = "output/invoice_" + orderId + ".pdf";
            Document document = new Document(PageSize.A4);
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(fileName));
            document.open();

            // Font ti·∫øng Vi·ªát
            BaseFont bf = BaseFont.createFont("arial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
            Font titleFont = new Font(bf, 16, Font.BOLD);
            Font normalFont = new Font(bf, 12);

            // Ti√™u ƒë·ªÅ
            Paragraph title = new Paragraph("üì¶ M·∫™U PHI·∫æU GIAO H√ÄNG\n\n", titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);

            // 1. Th√¥ng tin ƒë∆°n h√†ng
            document.add(new Paragraph("1. Th√¥ng tin ƒë∆°n h√†ng:", titleFont));
            document.add(new Paragraph("M√£ ƒë∆°n h√†ng (Order ID): " + orderId, normalFont));
            document.add(new Paragraph("Ng√†y t·∫°o ƒë∆°n: " + LocalDateTime.now().toLocalDate(), normalFont));
            document.add(new Paragraph("ƒê∆°n v·ªã v·∫≠n chuy·ªÉn: Shopee Xpress\n", normalFont));

            // 2. Ng∆∞·ªùi g·ª≠i
            document.add(new Paragraph("2. Th√¥ng tin ng∆∞·ªùi g·ª≠i:", titleFont));
            document.add(new Paragraph("H·ªç t√™n: Nguy·ªÖn VƒÉn A", normalFont));
            document.add(new Paragraph("SƒêT: 0988 123 456", normalFont));
            document.add(new Paragraph("ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM\n", normalFont));

            // 3. Ng∆∞·ªùi nh·∫≠n
            document.add(new Paragraph("3. Th√¥ng tin ng∆∞·ªùi nh·∫≠n:", titleFont));
            document.add(new Paragraph("H·ªç t√™n: Tr·∫ßn Th·ªã B", normalFont));
            document.add(new Paragraph("SƒêT: 0909 654 321", normalFont));
            document.add(new Paragraph("ƒê·ªãa ch·ªâ: 456 ƒê∆∞·ªùng XYZ, Qu·∫≠n B√¨nh Th·∫°nh, TP.HCM\n", normalFont));

            // 4. B·∫£ng s·∫£n ph·∫©m
            document.add(new Paragraph("4. Th√¥ng tin b∆∞u g·ª≠i:", titleFont));
            PdfPTable table = new PdfPTable(new float[]{1, 4, 2, 3});
            table.setWidthPercentage(100);
            table.addCell(createCell("STT", bf, true));
            table.addCell(createCell("T√™n s·∫£n ph·∫©m", bf, true));
            table.addCell(createCell("S·ªë l∆∞·ª£ng", bf, true));
            table.addCell(createCell("Gi√° (VND)", bf, true));

            table.addCell(createCell("1", bf, false));
            table.addCell(createCell("√Åo thun nam", bf, false));
            table.addCell(createCell("2", bf, false));
            table.addCell(createCell("300,000", bf, false));

            table.addCell(createCell("2", bf, false));
            table.addCell(createCell("Qu·∫ßn jean n·ªØ", bf, false));
            table.addCell(createCell("1", bf, false));
            table.addCell(createCell("450,000", bf, false));

            table.addCell(createCell("", bf, false));
            table.addCell(createCell("T·ªïng c·ªông", bf, true));
            table.addCell(createCell("3", bf, true));
            table.addCell(createCell("750,000", bf, true));

            document.add(table);
            document.add(Chunk.NEWLINE);

            // 5. COD & thanh to√°n
            document.add(new Paragraph("5. COD & Thanh to√°n:", titleFont));
            document.add(new Paragraph("Thu h·ªô COD: 750,000 VND", normalFont));
            document.add(new Paragraph("ƒê√£ thanh to√°n: ‚ùå", normalFont));
            document.add(new Paragraph("Ph∆∞∆°ng th·ª©c thanh to√°n: Thanh to√°n khi nh·∫≠n h√†ng (COD)\n", normalFont));

            // 6. M√£ v·∫°ch
            document.add(new Paragraph("6. M√£ v·∫°ch (barcode):", titleFont));
            Barcode128 barcode = new Barcode128();
            barcode.setCode(orderId);
            Image barcodeImage = barcode.createImageWithBarcode(writer.getDirectContent(), null, null);
            barcodeImage.scalePercent(150);
            document.add(barcodeImage);

            document.close();

            String message = "‚úÖ ƒê√£ in phi·∫øu giao h√†ng: " + fileName;
            System.out.println(message);
            return CompletableFuture.completedFuture(message);

        } catch (Exception e) {
            e.printStackTrace();
            return CompletableFuture.completedFuture("‚ùå L·ªói khi in phi·∫øu giao h√†ng: " + orderId);
        }
    }

    private PdfPCell createCell(String content, BaseFont bf, boolean isHeader) {
        Font font = new Font(bf, 12, isHeader ? Font.BOLD : Font.NORMAL);
        PdfPCell cell = new PdfPCell(new Phrase(content, font));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPadding(5);
        return cell;
    }
}
