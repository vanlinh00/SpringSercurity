package com.example.SpringSecurity.service;

import com.example.SpringSecurity.dto.OrderInfoDTO;
import com.example.SpringSecurity.dto.request.OrderRequest;
import com.example.SpringSecurity.entity.Order;
import com.example.SpringSecurity.repository.OrderRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@Service
public class OrderService {

    // B√†i  v·ªÅ Async v√† sync ƒë·ªìng b·ªô v√† async b·∫•t ƒë·ªìng b·ªô
    @Autowired
    private AsyncOrderProcessor asyncOrderProcessor;

    public List<OrderInfoDTO> processOrdersSync(List<OrderInfoDTO> orders) {
        asyncOrderProcessor.processOrdersSync(orders);
        return orders;
    }

    public void handleOrdersAsync(List<OrderInfoDTO> orders) {
        List<CompletableFuture<Void>> futures = new ArrayList<>();
        for (OrderInfoDTO order : orders) {
            futures.add(asyncOrderProcessor.processOrderAsync(order));
        }
        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
    }



    /*
 ‚úÖ V·∫•n ƒë·ªÅ ƒë·∫∑t ra (tr∆∞·ªõc khi d√πng cache)

Gi·∫£ s·ª≠ h·ªá th·ªëng qu·∫£n l√Ω giao h√†ng c√≥:

1.000 t√†i x·∫ø ƒëang ho·∫°t ƒë·ªông m·ªói ng√†y.

M·ªói t√†i x·∫ø giao trung b√¨nh 10 ƒë∆°n h√†ng/ng√†y.

M·ªói l·∫ßn t√†i x·∫ø v√†o app ƒë·ªÉ xem ƒë∆°n h√†ng c·∫ßn giao, app g·ªçi API /orders/active/{driverId}
‚Üí h·ªá th·ªëng truy v·∫•n t·ª´ PostgreSQL.

‚û§ Nh∆∞ v·∫≠y, ch·ªâ ri√™ng m·ªôt v√≤ng ƒë·ªùi t√†i x·∫ø m·ªü app ~5 l·∫ßn/ng√†y, h·ªá th·ªëng s·∫Ω th·ª±c hi·ªán:

1.000 t√†i x·∫ø √ó 5 l·∫ßn √ó query DB = 5.000 query DB/ng√†y ch·ªâ ƒë·ªÉ l·∫•y ƒë∆°n h√†ng ƒëang giao.

‚õî H·∫≠u qu·∫£:

TƒÉng t·∫£i kh√¥ng c·∫ßn thi·∫øt l√™n DB (m·ªói query ƒë·ªÅu ph·∫£i JOIN, WHERE status='DELIVERING', v.v.).

Tr·ªÖ response ‚Üí tr·∫£i nghi·ªám t√†i x·∫ø k√©m.

D·ªÖ d·∫´n ƒë·∫øn ngh·∫Ωn DB khi s·ªë l∆∞·ª£ng t√†i x·∫ø tƒÉng l√™n (scalability k√©m).

     */

    private final OrderRepository orderRepository;
    private final RedisTemplate<String, Object> redisTemplate;
    private final ObjectMapper objectMapper;

    public OrderService(OrderRepository orderRepository,
                        RedisTemplate<String, Object> redisTemplate,
                        ObjectMapper objectMapper) {
        this.orderRepository = orderRepository;
        this.redisTemplate = redisTemplate;
        this.objectMapper = objectMapper;
    }



    public void createOrder( OrderRequest orderRequest) {

        Order order = new Order();
        order.setDriverId(orderRequest.getDriverId());
        order.setStatus(orderRequest.getStatus());

        orderRepository.save(order);
        // üî• Xo√° cache ƒë∆°n h√†ng ƒëang giao c·ªßa t√†i x·∫ø n√†y (n·∫øu c√≥)
        String key = "active_orders:driver:" + order.getDriverId();
        redisTemplate.delete(key);
    }

    // üîπ L·∫•y danh s√°ch ƒë∆°n h√†ng ƒëang giao c·ªßa t√†i x·∫ø, c√≥ cache
    public List<Order> getActiveOrdersForDriver(Long driverId) throws JsonProcessingException {
        String key = "active_orders:driver:" + driverId;

        // Ki·ªÉm tra cache
        if (redisTemplate.hasKey(key)) {
            String json = (String) redisTemplate.opsForValue().get(key);
            Order[] orders = objectMapper.readValue(json, Order[].class);
            return Arrays.asList(orders);
        }

        // N·∫øu cache kh√¥ng c√≥ -> truy v·∫•n DB v√† cache l·∫°i
        List<Order> orders = orderRepository.findByDriverIdAndStatus(driverId, "DELIVERING");
        String json = objectMapper.writeValueAsString(orders);
        redisTemplate.opsForValue().set(key, json, Duration.ofMinutes(10)); // TTL: 10 ph√∫t

        return orders;
    }

    // üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng v√† x√≥a cache
    public void updateOrderStatus(Long orderId, String newStatus) {
        Order order = orderRepository.findById(orderId).orElseThrow();
        order.setStatus(newStatus);
        orderRepository.save(order);

        // X√≥a cache ƒë∆°n h√†ng c·ªßa t√†i x·∫ø t∆∞∆°ng ·ª©ng
        String key = "active_orders:driver:" + order.getDriverId();
        redisTemplate.delete(key);
    }



}
