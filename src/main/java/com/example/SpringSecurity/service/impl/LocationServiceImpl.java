package com.example.SpringSecurity.service.impl;


import com.example.SpringSecurity.entity.Location;
import com.example.SpringSecurity.repository.LocationRepository;
import com.example.SpringSecurity.utils.StrategyPartern.StorageStrategy;
import com.example.SpringSecurity.service.LocationService2;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import java.util.List;

//        // üëâ s·ª≠ d·ª•ng Strategy Pattern ƒë·ªÉ ho√°n ƒë·ªïi chi·∫øn l∆∞·ª£c l∆∞u d·ªØ li·ªáu
@Service
public class LocationServiceImpl implements  LocationService2 {

    private final LocationRepository locationRepository;

    // ƒê√¢y l√† h√†nh ƒë·ªông T√°ch r·ªùi h√†nh vi (behavior) kh·ªèi ƒë·ªëi t∆∞·ª£ng.
    private final StorageStrategy storageStrategy; // Strategy Pattern

    public LocationServiceImpl(LocationRepository locationRepository,
                              // @Qualifier("redisStorageStrategy") StorageStrategy storageStrategy) {
                               @Qualifier("databaseStorageStrategy") StorageStrategy storageStrategy) {

        this.locationRepository = locationRepository;
        this.storageStrategy = storageStrategy; // ch·ªçn chi·∫øn l∆∞·ª£c l∆∞u d·ªØ li·ªáu (Redis ho·∫∑c DB)
    }


    //Overriding: Ghi ƒë√® method t·ª´ l·ªõp cha, v√≠ d·ª• trong service extends interface.
    @Override
    public void saveLocation(Location location) {
        // üëâ s·ª≠ d·ª•ng Strategy Pattern ƒë·ªÉ ho√°n ƒë·ªïi chi·∫øn l∆∞·ª£c l∆∞u d·ªØ li·ªáu
        storageStrategy.store(location); // c√≥ th·ªÉ d√πng Redis ho·∫∑c Database
    }

    @Override
    public List<Location> getLocationsByUser(Long userId) {
        return locationRepository.findByUserId(userId);
    }


}
